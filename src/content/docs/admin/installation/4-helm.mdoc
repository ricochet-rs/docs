---
title: Helm
---

## Installation

You can install ricochet through our OCI helm chart via

```sh
helm install ricochet oci://reg.ricochet.rs/helm/ricochet
```

## Architecture

Each ricochet app is a Kubernetes Deployment.
Each ricochet task is a Kubernetes Job.

These resources are created by the ricochet server.
The settings in `launcher.deployment` allow to configure the deployment spec for apps.

{% aside type="tip" %}
To control more aspects of the deployment spec of an app, see [Customizing the Deployment Spec](#custom-deployment-config-per-app).
{% /aside %}

### App Deployment Flow

When a new app is deployed, a `deploy-<ulid>` job is being created which installs all required dependency packages.

Upon starting an app, a init-container (`check-dependencies`) is spawned which ensures that all app dependencies are installed.
This is required because the initial dependency installation will only run on a specific node which has a dedicated architecture.
If the app pod would start on a node with a different architecture, it would fail as the dependencies have not yet been installed for that architecture.
In that case, the init-container will install the dependencies again, if needed.

## Persistence

There are two important directories to preserve:

- the "data" dir at `/opt/ricochet/data`
- the "cache" dir at `/opt/ricochet/cache`

Both must be "ReadWriteMany" volumens as they must have the capability to be mounted into multiple pods.

Here are some recommended PVC sizes depending on how (active) apps the instance will likely host*:

| # of Apps  | Cache | Data |
|---------|-------|-------|
| < 5     | 10 Gi  | 20 Gi |
| 5 - 20  | 25 Gi | 50 Gi |
| 20+      | 30 Gi | 75Gi |

\* `cache` storage need does not increase linearly as the more apps are deployed, the more dependencies are shared.
Data (app) storage instead has a more linear growth but highly depends on the size of the individual bundles.

The reasoning behind these values is as follows: The

- The `cache` dir stores all R/Julia/Python packages across all apps and tasks.
Over time, multiple interpreter versions will be used and the cache will grow.

- The `data` dir stores all app and user content.
  It's size highly depends on the size of the bundles for each app. Bundles can be multiple MB in size and a single deployment can grow quickly if many deployments are issued during development. One can also start smaller and extend the PVC size at any time, though doing so might come with avoidable friction.

{% aside type="caution" %}
Ensure you have proper backups for your "data" PVC. Loosing access to it means loosing all app and user content.
{% /aside %}

## App Scaling

ricochet has a built-in scaling mechanism for each App deployment.

Because each app is a Kubernetes Deployment, apps can scale horizontally using multiple replicas.
The scaling logic is making use of the following internal metrics:

- `min_instances`: The minimum number of replicas to keep running.
- `max_instances`: The maximum number of replicas to run.
- `spawn_threshold`: Occupied percentage of connections after which a scale up is triggered.
- `max_connections`: The maximum number of connections per app replica.
- `max_connection_age`: The maximum age of a connection before it is closed.
- `inactive_timeout`: The maximum time a connection can be idle before it is closed.

All of the above influence when and how an app deployment is scaled.

## High Availability

### Server

The ricochet server does not yet support high availability.

### Apps

Apps are Kubernetes deployments which support running multiple replicas.
This effectively ensures High-availability, and can be hardened by enforcing a minimum number of replicas which are spread across multiple nodes.

## Custom Deployment Config per App

It is possible to extend the Deployment spec on a per app basis with custom YAML configurations.
This is considered an advanced feature and care must be taken to not add or overwrite config sections which already exist.
The following ones are possible set instance-wide through the helm chart:

- imagePullPolicy
- imagePullSecrets
- strategy

{% aside type="note" %}
For security reasons, this feature is disabled by default and must be enabled explicitly through `allow_custom_k8s_config` in the helm chart values.
{% /aside %}
