---
import type { ThemeIconName } from '../icon.ts';
import VersionSelect from 'starlight-versions/components/VersionSelect.astro'

// Define theme cycle and icon mapping
const themes = ['auto', 'light', 'dark'] as const;
const themeIconMap: Record<string, ThemeIconName> = {
	auto: 'laptop',
	light: 'sun',
	dark: 'moon'
};

const themeLabels = {
	auto: Astro.locals.t('themeSelect.auto'),
	light: Astro.locals.t('themeSelect.light'),
	dark: Astro.locals.t('themeSelect.dark')
};
---

<starlight-theme-select>
	<button
		type="button"
		class="theme-toggle"
		aria-label={Astro.locals.t('themeSelect.accessibleLabel')}
		data-theme="auto"
	>
		<svg class="theme-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
			<path d="M4 6V16H20V6H4ZM20 18H4C2.89 18 2 17.11 2 16V6C2 4.89 2.89 4 4 4H20C21.11 4 22 4.89 22 6V16C22 17.11 21.11 18 20 18ZM23 20H1C0.45 20 0 20.45 0 21S0.45 22 1 22H23C23.55 22 24 21.55 24 21S23.55 20 23 20Z"/>
		</svg>
		<span class="theme-label">Auto</span>
	</button>
</starlight-theme-select>

<style>
	.theme-toggle {
		display: flex;
		align-items: center;
		justify-content: flex-start;
		gap: 0.5rem;
		padding: 0.5rem 0.75rem;
		border-radius: 0.5rem;
		background: transparent;
		color: var(--sl-color-gray-1);
		cursor: pointer;
		font-size: var(--sl-text-sm);
		transition: all 0.2s ease;
		min-width: 5.5rem;
		width: 5.5rem;
		height: 2.5rem;
	}

	.theme-toggle:hover {
		background: var(--sl-color-gray-6);
		color: var(--sl-color-gray-2);
		border-color: var(--sl-color-gray-4);
	}

	.theme-icon {
		flex-shrink: 0;
		width: 1rem;
		height: 1rem;
		min-width: 1rem;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.theme-label {
		white-space: nowrap;
		min-width: 2.5rem;
		text-align: left;
	}

	@media (max-width: 50rem) {
		.theme-toggle {
			min-width: 2.5rem;
			width: 2.5rem;
		}
		.theme-label {
			display: none;
		}
	}
</style>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
	if (typeof StarlightThemeProvider !== 'undefined' && StarlightThemeProvider.updatePickers) {
		StarlightThemeProvider.updatePickers();
	}
</script>

<script>
	type Theme = 'auto' | 'dark' | 'light';

	/** Key in `localStorage` to store color theme preference at. */
	const storageKey = 'starlight-theme';

	/** Theme cycle order */
	const themes: Theme[] = ['auto', 'light', 'dark'];

	/** Icon SVGs for each theme */
	const themeIcons = {
		auto: `<path d="M4 6V16H20V6H4ZM20 18H4C2.89 18 2 17.11 2 16V6C2 4.89 2.89 4 4 4H20C21.11 4 22 4.89 22 6V16C22 17.11 21.11 18 20 18ZM23 20H1C0.45 20 0 20.45 0 21S0.45 22 1 22H23C23.55 22 24 21.55 24 21S23.55 20 23 20Z"/>`,
		light: `<path d="M12,8A4,4 0 0,0 8,12A4,4 0 0,0 12,16A4,4 0 0,0 16,12A4,4 0 0,0 12,8M12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6A6,6 0 0,1 18,12A6,6 0 0,1 12,18M20,8.69V4H15.31L12,0.69L8.69,4H4V8.69L0.69,12L4,15.31V20H8.69L12,23.31L15.31,20H20V15.31L23.31,12L20,8.69Z"/>`,
		dark: `<path d="M17.75,4.09L15.22,6.03L16.13,9.09L13.5,7.28L10.87,9.09L11.78,6.03L9.25,4.09L12.44,4L13.5,1L14.56,4L17.75,4.09M21.25,11L19.61,12.25L20.2,14.23L18.5,13.06L16.8,14.23L17.39,12.25L15.75,11L17.81,10.95L18.5,9L19.19,10.95L21.25,11M18.97,15.95C19.8,15.87 20.69,17.05 20.16,17.8C19.84,18.25 19.5,18.67 19.08,19.07C15.17,23 8.84,23 4.94,19.07C1.03,15.17 1.03,8.83 4.94,4.93C5.34,4.53 5.76,4.17 6.21,3.85C6.96,3.32 8.14,4.21 8.06,5.04C7.79,7.9 8.75,10.87 10.95,13.06C13.14,15.26 16.1,16.22 18.97,15.95M17.33,17.97C14.5,17.81 11.7,16.64 9.53,14.5C7.36,12.31 6.2,9.5 6.04,6.68C3.23,9.82 3.34,14.4 6.35,17.41C9.37,20.43 14,20.54 17.33,17.97Z"/>`
	};

	/** Theme labels for display */
	const themeLabels = {
		auto: 'Auto',
		light: 'Light',
		dark: 'Dark'
	};

	/** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
	const parseTheme = (theme: unknown): Theme =>
		theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto';

	/** Load the user's preference from `localStorage`. */
	const loadTheme = (): Theme =>
		parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey));

	/** Store the user's preference in `localStorage`. */
	function storeTheme(theme: Theme): void {
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '');
		}
	}

	/** Get the preferred system color scheme. */
	const getPreferredColorScheme = (): Theme =>
		matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';

	/** Get the next theme in the cycle */
	function getNextTheme(currentTheme: Theme): Theme {
		const currentIndex = themes.indexOf(currentTheme);
		const nextIndex = (currentIndex + 1) % themes.length;
		return themes[nextIndex];
	}

	/** Update button UI, document theme, and local storage state. */
	function onThemeChange(theme: Theme): void {
			// Update all theme select buttons
			document.querySelectorAll('starlight-theme-select button').forEach((button) => {
				if (button instanceof HTMLButtonElement) {
					button.dataset.theme = theme;

					// Update icon
					const icon = button.querySelector('.theme-icon');
					if (icon) {
						icon.innerHTML = themeIcons[theme];
					}

					// Update label
					const label = button.querySelector('.theme-label');
					if (label) {
						label.textContent = themeLabels[theme];
					}

					// Update aria-label
					button.setAttribute('aria-label', `Theme: ${themeLabels[theme]}`);
				}
			});

			// Update document theme
			document.documentElement.dataset.theme = theme === 'auto' ? getPreferredColorScheme() : theme;

			// Store preference
			storeTheme(theme);

			// Update starlight theme provider if it exists
			if (typeof (globalThis as any).StarlightThemeProvider !== 'undefined' && (globalThis as any).StarlightThemeProvider.updatePickers) {
				(globalThis as any).StarlightThemeProvider.updatePickers(theme);
			}
		}

	// React to changes in system color scheme.
	matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
		if (loadTheme() === 'auto') onThemeChange('auto');
	});

	class StarlightThemeSelect extends HTMLElement {
		constructor() {
			super();

			// Initialize with saved theme
			const currentTheme = loadTheme();
			onThemeChange(currentTheme);

			// Add click handler
			const button = this.querySelector('button');
			if (button) {
				button.addEventListener('click', () => {
					const currentTheme = parseTheme(button.dataset.theme);
					const nextTheme = getNextTheme(currentTheme);
					onThemeChange(nextTheme);
				});
			}
		}
	}

	customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>
